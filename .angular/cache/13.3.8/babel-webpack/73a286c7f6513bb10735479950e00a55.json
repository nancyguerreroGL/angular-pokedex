{"ast":null,"code":"import { forkJoin } from 'rxjs';\nimport { delay, map, switchMap, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../store\";\nconst POKEDEX_API = 'https://pokeapi.co/api/v2/pokemon/';\nconst POKEDEX_IMAGE_BASE_URL = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\nconst POKEDEX_IMAGE_BASE_FULL = \"https://assets.pokemon.com/assets/cms2/img/pokedex/full/\";\nconst POKEMON_SPECIES = \"https://pokeapi.co/api/v2/pokemon-species/\";\nconst POKEDEX_IMAGE_FORMAT = '.png';\n\nconst baseImgUrl = isFullImg => isFullImg ? `${POKEDEX_IMAGE_BASE_FULL}` : `${POKEDEX_IMAGE_BASE_URL}`;\n\nconst getImageZeroDigit = (id, isFullImg) => {\n  const baseImg = baseImgUrl(isFullImg);\n  return id.length < 2 ? `${baseImg}00${id}` : `${baseImg}0${id}`;\n};\n\nconst getPokedex_image_base_number = (value, isFullImg) => {\n  const convertId = value.toString();\n\n  if (convertId.length < 3) {\n    return getImageZeroDigit(convertId, isFullImg);\n  }\n\n  return `${baseImgUrl(isFullImg)}${convertId}`;\n};\n\nexport let PokedexDashboardService = /*#__PURE__*/(() => {\n  class PokedexDashboardService {\n    constructor(http, store) {\n      this.http = http;\n      this.store = store;\n    }\n\n    getPokemonList() {\n      const url = this.store.value.pokemonResults.next;\n      return this.http.get(url).pipe(switchMap(items => {\n        const {\n          results\n        } = items;\n        const pokemonDetailRequest = results.map(item => this.getPokemonDetail(item.name, false));\n        return forkJoin(pokemonDetailRequest).pipe(delay(1500), map(pokemonResultsArray => {\n          return {\n            count: items.count,\n            next: items.next,\n            results: [...this.store.value.pokemonResults.results, ...pokemonResultsArray],\n            previous: items.previous\n          };\n        }));\n      }), tap(nextState => {\n        this.store.set('pokemonResults', nextState);\n      }));\n    }\n\n    getPokemonDetail(name, isFullImg) {\n      return this.http.get(`${POKEDEX_API}${name}`).pipe(map(item => {\n        return Object.assign(Object.assign({}, item), {\n          imageUrl: `${getPokedex_image_base_number(item.id, isFullImg)}${POKEDEX_IMAGE_FORMAT}`\n        });\n      }));\n    }\n\n    getPokemonSpecies(name) {\n      return this.http.get(`${POKEMON_SPECIES}${name}`).pipe(map(item => item));\n    }\n\n  }\n\n  PokedexDashboardService.ɵfac = function PokedexDashboardService_Factory(t) {\n    return new (t || PokedexDashboardService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Store));\n  };\n\n  PokedexDashboardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PokedexDashboardService,\n    factory: PokedexDashboardService.ɵfac\n  });\n  return PokedexDashboardService;\n})();","map":null,"metadata":{},"sourceType":"module"}